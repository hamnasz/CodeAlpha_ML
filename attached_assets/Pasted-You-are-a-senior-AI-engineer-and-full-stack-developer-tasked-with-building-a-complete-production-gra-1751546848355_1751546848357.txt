You are a senior AI engineer and full-stack developer tasked with building a complete production-grade web application for automated credit scoring. The application should meet the following specifications:

Objective:
Develop a web-based system that allows users to upload financial datasets (CSV, Excel, etc.), automatically processes the data, builds credit scoring models, and presents evaluation results through an intuitive, visually appealing interface with dark mode support.

Key Functional Requirements:
✅ Data Ingestion:

Allow users to upload datasets in CSV, Excel, or similar tabular formats via the frontend.

Validate file types and provide user-friendly error messages for unsupported formats.

✅ Automated Data Preparation & Feature Engineering:

Clean missing or inconsistent data entries automatically.

Engineer additional relevant features such as:

Debt-to-Income Ratio

Average Payment Delays

Credit Utilization Rate

Handle categorical variables via suitable encoding (e.g., one-hot encoding, label encoding).

Provide a summary of data cleaning steps and feature creation in the UI.

✅ Model Development:

Train classification models including Logistic Regression, Decision Trees, and Random Forest.

Automatically perform hyperparameter tuning using methods like Grid Search or Random Search.

Log the training process and notify the user when complete.

✅ Model Evaluation:

Compute and display evaluation metrics including:

Precision

Recall

F1-Score

ROC-AUC Curve (with plot visualization)

Compare models and automatically select the best-performing one based on a combination of metrics.

✅ Production Considerations & Explainability:

Present model interpretability insights such as feature importance or SHAP values in the frontend.

Provide recommendations for:

Bias mitigation and fairness checks

Ongoing monitoring strategies

Retraining pipelines for model updates

Ensure results are exportable (e.g., downloadable reports).

Frontend Design Requirements:
Build a modern, responsive web interface with a clean layout.

Include both light and dark mode, default to dark mode for improved aesthetics.

Use modern frontend frameworks (e.g., React, Vue.js, or similar).

Incorporate data visualizations for:

Data summaries

Feature distributions

Model performance (e.g., ROC curves, bar charts for feature importance)

Provide real-time progress indicators during processing and model training.

Technical Stack Recommendations:
Frontend:

React.js or Next.js

Tailwind CSS or Material UI for styling

Chart.js or D3.js for interactive visualizations

Dark mode toggle integrated

Backend:

Python with FastAPI or Flask for API endpoints

pandas, numpy for data handling

scikit-learn, xgboost for machine learning

Joblib or Pickle for model persistence

Additional:

Optional: Dockerize the entire application for deployment

Optional: Use Streamlit for rapid prototyping if tight timelines apply

Output Expected from ChatGPT:
Step-by-step project structure recommendations

Sample code snippets for:

File uploads

Data preprocessing pipeline

Feature engineering logic

Model training and evaluation

Serving results to the frontend

UI design suggestions (color scheme, layout, components)

Guidance on deployment and scalability considerations

Tone & Style:

Provide responses in structured sections with clear headings

Include code examples wherever relevant

Ensure explanations are suitable for both technical teams and business stakeholders

