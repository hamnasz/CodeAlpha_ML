You are a senior frontend engineer & UI/UX designer tasked with building the frontend interface for a generalized AutoML web application.

The backend (already developed) exposes clean REST APIs for:

Uploading datasets & previewing data

Task type detection

Preprocessing summary

Training models & monitoring progress

Getting evaluation metrics & visualizations

Downloading reports

You must build a beautiful, modern, animated web interface that interacts with these APIs and delivers an excellent user experience, even for non-technical users.

🎯 Objective:
Design and implement a frontend for the AutoML application with:

A clean, dark-by-default aesthetic with optional light mode.

Smooth animations and transitions for actions (uploads, progress bars, tab switches).

Intuitive navigation and responsive design for all devices.

Data visualizations that are interactive and engaging.

✨ UI/UX Design Requirements:
📂 Dataset Upload & Preview:
Drag-and-drop + file picker interface.

Animated progress bar during file upload.

Preview table of the dataset with pagination & sorting.

Dropdown or modal to select/override target column.

🧠 Task Detection & Preprocessing:
Show detected task (classification/regression) with an icon & text.

Animated stepper or progress indicator showing:

Cleaning → Feature Engineering → Training → Evaluation

Display preprocessing summary in a collapsible panel.

📈 Training Progress & Evaluation:
Real-time training progress bar with % complete.

Dashboard showing:

Model comparison table (metrics & ranks)

Interactive ROC curve (if classification)

Confusion matrix or residual plots (where applicable)

Bar chart for feature importances

📄 Reports:
Button to download reports (PDF/CSV) styled prominently.

🌙 Theming & Responsiveness:
Dark mode by default with toggle to light mode.

Fully responsive for mobile, tablet, and desktop.

Elegant animations for page transitions, chart updates, and interactions.

🛠️ Tech Stack Recommendation:
Framework: React.js (or Next.js if SSR/SEO is important)

Styling & Components: Tailwind CSS + Headless UI OR Material UI

State Management: React Query or Redux Toolkit (for async API calls & state)

Charts & Visualizations: Chart.js / Recharts / D3.js / Plotly

Routing & Animations:

React Router

Framer Motion (for animations)

🔌 API Integration:
Consume backend endpoints for:
✅ POST /upload → File upload
✅ GET /preview → Dataset preview
✅ GET /task → Detected task type
✅ GET /preprocessing-summary → Cleaning & engineering details
✅ POST /train → Trigger training
✅ GET /training-progress → Poll training status
✅ GET /metrics → Evaluation results
✅ GET /visualizations → ROC, Confusion Matrix, Feature Importance
✅ GET /download-report → Report file

Show loaders, error states, and success messages for each.

📄 Output Expected from You:
✅ Suggested folder/project structure
✅ Suggested design system / color palette (e.g., shades of gray + accent color)
✅ Suggested component hierarchy & pages
✅ Sample code snippets:

Upload component with drag/drop + progress

API service file with typed endpoints

Animated dashboard cards & charts
✅ Notes on accessibility & responsiveness

📜 Tone & Style:
Use structured headings and explain design decisions.

Include code where helpful but focus on user experience.

🚀 Begin by outlining:
✅ Recommended folder structure & component map
✅ Suggested color palette and typography
✅ List of UI components/pages & their responsibilities